- name: This play downloads required ISOs for VM setup
  hosts: localhost
  vars_files:
    - lab_vars.yml
  tasks:
    - name: Include downloader role
      ansible.builtin.include_role:
        name: package-downloader
      vars:
        rh_product_filename: "{{ item.filename }}"
        rh_product_checksum: "{{ item.checksum }}"
        rh_api_offline_token: "{{ offline_token }}"
      loop:
        - filename: rhel8.iso
          checksum: "{{ checksum.rhel8 }}"
      when: offline_token is defined and offline_token != ""

- name: This play provisions the VM for lab purposes
  hosts: localhost
  become: true
  vars_files:
    - lab_vars.yml
  tasks:
    - name: Ensure required packages are in place
      ansible.builtin.yum:
        name: "{{ packages }}"

    - name: Ensure libvirtd is running
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

    - name: Ensure libvirt can use root as user
      ansible.builtin.replace:
        path: /etc/libvirt/qemu.conf
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      loop:
        - regexp: '#user = "root"'
          line: 'user = "root"'
        - regexp: '#group = "root"'
          line: 'group = "root"'

    - name: Restart libvirtd service
      ansible.builtin.service:
        name: libvirtd
        state: restarted

    - name: Create required folders
      ansible.builtin.file:
        state: directory
        path: "{{ playbook_dir }}/terraform/kickstart/{{ item.instance }}"
        recurse: true
      loop: "{{ modules }}"

    - name: Create symbolic link to RHEL image
      ansible.builtin.file:
        src: "{{ playbook_dir }}/rhel8.iso"
        dest: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}.iso"
        state: link
      loop: "{{ modules }}"

    - name: Create a 1Mib file to store kickstart
      community.general.filesize:
        path: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}-oemdrv.img"
        size: 1MiB
      loop: "{{ modules }}"

    - name: Generate kickstart from template
      ansible.builtin.template:
        src: ks.cfg.j2
        dest: "{{ playbook_dir }}/terraform/kickstart/{{ item.instance }}/ks.cfg"
        mode: 0755
      loop: "{{ modules }}"
      vars:
        hostname: "{{ item.hostname }}"

    - name: Rebuild Kickstart config
      community.general.filesystem:
        fstype: ext2
        dev: "{{ playbook_dir }}/terraform/modules/{{ item.module }}/{{ item.instance }}-oemdrv.img"
        opts: -d {{ playbook_dir }}/terraform/kickstart/{{ item.instance }} -L OEMDRV
        force: true
      loop: "{{ modules }}"

    - name: Provision all terraform resources
      community.general.terraform:
        project_path: "terraform/"
        force_init: true
        variables:
          network_cidr: ' ["{{ network_cidr }}"]'
        state: present

    - name: Add Local resolver for the domain
      ansible.builtin.copy:
        content: server=/ssodemo.labs/{{ network_cidr | next_nth_usable(1) }}
        dest: /etc/NetworkManager/dnsmasq.d/ssodemo.conf
        mode: 0755
      become: true

    - name: Restart NetworkManager to reload config
      ansible.builtin.service:
        name: NetworkManager
        state: restarted

    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        host: "{{ item.hostname }}.{{ domain }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ modules }}"
      become: false


- name: Check connection to servers
  hosts: sso
  gather_facts: false
  tasks:
    - name: Waiting for installation to end, it can take time!
      ansible.builtin.wait_for_connection:
        timeout: 1800
        sleep: 120

    - name: Ping host to check status
      ansible.builtin.ping:

    - name: Setup is ready
      ansible.builtin.debug:
        msg: "Setup completed, now you can proceed with post install steps"
