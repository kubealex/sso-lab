- name: This play provisions VMs for SSO lab setup 
  hosts: localhost
  vars_prompt:
  - name: offline_token
    prompt: What is your Offline Token? Leave this empty if you don't want to download ISOS (Check README)
    unsafe: yes
    private: yes      
  vars:
    network_cidr: 192.168.212.0/24
    checksum:
      rhel8: c324f3b07283f9393168f0a4ad2167ebbf7e4699d65c9670e0d9e58ba4e2a9a8

  tasks:
    - block:
      - name: Retrieve an access token
        ansible.builtin.uri:
          url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          body:
            grant_type: refresh_token
            client_id: rhsm-api
            refresh_token: "{{ offline_token }}"
          body_format: form-urlencoded
          method: POST
        register: response

      - name: Retrieve image download URL
        ansible.builtin.uri:
          url: https://api.access.redhat.com/management/v1/images/{{ checksum.rhel8 }}/download
          follow_redirects: no
          headers:
            Content-Type: application/json
            Authorization: 'Bearer {{ response.json.access_token }}'
          status_code:
            - 307
            - 200
        register: imageurl

      - name: Set result as facts
        ansible.builtin.set_fact:
          installer_url: "{{ imageurl.json.body.href }}"
          installer_package: "{{ imageurl.json.body.filename }}"
      
      - name: Retrieve RHEL ISO
        ansible.builtin.get_url:
          url: "{{ installer_url }}"
          dest: "{{ playbook_dir }}/rhel.iso"

      when: offline_token is defined and offline_token != ""


    - name: Rebuild Kickstart config
      community.general.filesystem:
        fstype: ext2
        dev: "{{ playbook_dir }}/terraform/modules/01_sso_instance/oemdrv.img"
        opts: -d {{ playbook_dir }}/terraform/kickstart/rhel8-sso -L OEMDRV
        force: true

    - name: Provision all terraform resources
      community.general.terraform:
        project_path: "terraform/"
        force_init: true
        variables:
          network_cidr: ' ["{{ network_cidr }}"]'
        state: present

    - name: Add Local resolver for the domain
      copy:
        content: server=/ssodemo.labs/{{ network_cidr | next_nth_usable(1)}}
        dest: /etc/NetworkManager/dnsmasq.d/ssodemo.conf
      become: true
    
    - name: Restart NetworkManager to reload config
      service:
        name: NetworkManager
        state: restarted

    - name: Add servers to inventory
      add_host:
        hostname: "{{ item }}.ssodemo.labs"
        ansible_user: redhat
        ansible_password: redhat
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups:
          - "servers"        
      loop:
        - sso

    - name: Ensure to clean known_hosts
      known_hosts:
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ groups['servers'] }}"

- name: Check connection to servers
  hosts: servers
  gather_facts: no
  tasks:
    - name: Waiting for installation to end, it can take time!
      wait_for_connection:
        timeout: 1800
        delay: 600

    - ping:

    - name: Setup sysadmin user to use sudo
      copy:
        content: '%wheel	ALL=(ALL)	NOPASSWD: ALL'
        dest: /etc/sudoers.d/wheelers
        mode: 0400
        owner: root
        group: root

    - name: Setup is ready
      debug:
        msg: "Setup completed, now you can proceed with post install steps"

